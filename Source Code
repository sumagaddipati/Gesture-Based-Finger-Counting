import cv2 as cv
import mediapipe as mp
import time

# Initialize camera
cap = cv.VideoCapture(0)

# Initialize Mediapipe Hands module
mpHands = mp.solutions.hands
hands = mpHands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)
mpDraw = mp.solutions.drawing_utils

# Define the landmarks for each finger tip
finger_tips = [4, 8, 12, 16, 20]  # Thumb, Index, Middle, Ring, Pinky

ptime = 0  # Previous time for FPS calculation

while True:
    success, img = cap.read()
    if not success:
        break

    imgRGB = cv.cvtColor(img, cv.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    finger_count = 0  # Store the number of fingers raised

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            lmList = []  # Store landmark positions
            for id, lm in enumerate(handLms.landmark):
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lmList.append((cx, cy))

            # Count fingers
            if len(lmList) > 0:
                for tip in finger_tips:
                    if lmList[tip][1] < lmList[tip - 2][1]:  # If finger tip is above the lower knuckle
                        finger_count += 1

            # Draw hand landmarks
            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

    # Display finger count
    cv.putText(img, f'Fingers: {finger_count}', (50, 100), cv.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 3)

    # FPS Calculation
    ctime = time.time()
    fps = 1 / (ctime - ptime)
    ptime = ctime

    cv.putText(img, f'FPS: {int(fps)}', (10, 70), cv.FONT_HERSHEY_PLAIN, 2, (255, 0, 255), 3)

    # Show output
    cv.imshow("Finger Counter", img)

    # Exit when 'q' is pressedq
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv.destroyAllWindows()
